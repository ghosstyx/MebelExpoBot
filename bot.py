# import asyncio
# import logging
# from aiogram import Bot, Dispatcher, types
# from aiogram.filters import Command
# from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
# from google_sheets import add_visitor_data
#
#
# # # –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
# # user_data = {}
#
# # # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
# # contact_keyboard = ReplyKeyboardMarkup(
# #     keyboard=[[KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
# #     resize_keyboard=True
# # )
#
# # # –ö–æ–º–∞–Ω–¥–∞ /start
# # @dp.message(Command("start"))
# # async def start(message: types.Message):
# #     user_data[message.from_user.id] = {}
# #     await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 25% —Å–∫–∏–¥–∫–∏.\n–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
#
# # –ü–æ–ª—É—á–∞–µ–º –∏–º—è
# @dp.message()
# async def get_name(message: types.Message):
#     user_id = message.from_user.id
#     if user_id not in user_data:
#         return
#
#     user_data[user_id]["name"] = message.text
#     await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY):")
#
# # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
# @dp.message()
# async def get_birth_date(message: types.Message):
#     user_id = message.from_user.id
#     if user_id not in user_data:
#         return
#
#     user_data[user_id]["birth_date"] = message.text
#     await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=contact_keyboard)
#
# # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
# @dp.message()
# async def get_phone(message: types.Message):
#     user_id = message.from_user.id
#     if user_id not in user_data or not message.contact:
#         return
#
#     user_data[user_id]["phone"] = message.contact.phone_number
#     await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–µ–ª—Ñ–∏ —Å –Ω–∞—à–∏–º —Å—Ç–µ–Ω–¥–æ–º.")
#
# # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
# @dp.message()
# async def get_photo(message: types.Message):
#     user_id = message.from_user.id
#     if user_id not in user_data or not message.photo:
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ
#     photo_id = message.photo[-1].file_id
#     photo_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{photo_id}"
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
#     user_info = user_data[user_id]
#     add_visitor_data(user_id, user_info["name"], user_info["birth_date"], user_info["phone"], photo_url)
#
#     # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
#     del user_data[user_id]
#
#     await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π.")
#
# # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# async def main():
#     print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
#     await dp.start_polling(bot)
#
# if __name__ == "__main__":
#     asyncio.run(main())
