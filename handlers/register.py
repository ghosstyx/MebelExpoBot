from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message
from loader import bot
import re
from aiogram.fsm.context import FSMContext
from states.register import RegisterState
from google_sheets import add_visitor_data, is_phone_registered
from keyboards.contact import contact_keyboard

register_router = Router()


def is_valid_name(name):
    return bool(re.fullmatch(r"[–ê-–Ø–∞-—èA-Za-z\s-]{2,}", name))


def is_valid_date(date_text):
    return bool(re.fullmatch(r"\d{2}\.\d{2}\.\d{4}", date_text))


def is_valid_phone(phone):
    return bool(re.fullmatch(r"\+\d{10,15}", phone))


# üìå 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
@register_router.message(RegisterState.name)
async def process_name(message: Message, state: FSMContext):
    if not is_valid_name(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è! –í–≤–µ–¥–∏—Ç–µ –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤).")
        return

    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY):")
    await state.set_state(RegisterState.birthdate)


# üìå 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@register_router.message(RegisterState.birthdate)
async def process_birthdate(message: Message, state: FSMContext):
    if not is_valid_date(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11.11.2000).")
        return

    await state.update_data(birthdate=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_keyboard)
    await state.set_state(RegisterState.phone)


# üìå 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–µ–ª—Ñ–∏
@register_router.message(RegisterState.phone, F.contact)
async def process_phone(message: Message, state: FSMContext):
    if not message.contact:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        return
    phone = message.contact.phone_number
    if not is_valid_phone(phone):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    if is_phone_registered(phone):
        await message.answer("–û—à–∏–±–∫–∞: –ê–∫–∫–∞—É–Ω—Ç —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! üö´")
        return

    await state.update_data(phone=message.contact.phone_number)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –Ω–∞—à–∏–º —Å—Ç–µ–Ω–¥–æ–º.")
    await state.set_state(RegisterState.photo)


# üìå 5. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
@register_router.message(RegisterState.photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    full_name = data["name"]
    birth_date = data["birthdate"]
    phone = data["phone"]

    photo_id = message.photo[-1].file_id
    date = message.date.strftime("%d.%m.%Y")

    file = await bot.get_file(photo_id)
    photo_url = f"https://api.telegram.org/file/bot{bot.token}/{file.file_path}"
    try:
     add_visitor_data(user_id, full_name, birth_date, phone, photo_url, date)
    except ValueError as e:
        await message.answer(str(e))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∂–¥–µ–Ω–∏—è!")
    await state.clear()